=====
GP    
-----
nv=2;
xlv=-2*ones(1,nv);
xuv=2*ones(1,nv);
-----
f=((1+(x(1,:)+x(2,:)+1).^2.*(19-14.*x(1,:)+3.*x(1,:).^2-14.*x(2,:)+6.*x(1,:).*x(2,:)+3.*x(2,:).^2)).*...
    (30+(2.*x(1,:)-3.*x(2,:)).^2.*(18-32.*x(1,:)+12.*x(1,:).^2+48.*x(2,:)-36.*x(1,:).*x(2,:)+27.*x(2,:).^2)));
=====
SC
-----
nv=2;
xlv=-2*ones(1,nv);
xuv=2*ones(1,nv);
-----
f=4.*x(1,:).^2-21./10.*x(1,:).^4+1./3.*x(1,:).^6+x(1,:).*x(2,:)-4.*x(2,:).^2+4.*x(2,:).^4;
% f=4*x(1,:).^2-21/10*x(1,:).^4+1/3*x(1,:).^6+x(1,:).*x(2,:)-4*x(2,:).^2+4*x(2,:).^4;
=====
Hartmann H6
-----
nv=6;
xlv=0*ones(1,nv);
xuv=1*ones(1,nv);
-----
%x=[0,1], n=6, optimum is -3.322
c=[1 1.2 3 3.2];
alpha=[10 3 17 3.5 1.7 8; 0.05 10 17 0.1 8 14; 3 3.5 1.7 10 17 8; 17 8 0.05 10 0.1 14];
p=[0.1312 0.1696 0.5569 0.0124 0.8283 0.5886; 0.2329 0.4135 0.8307 0.3736 0.1004 0.9991; 0.2348 0.1451 0.3522 0.2883 0.3047 0.665; 0.4047 0.8828 0.8732 0.5743 0.1091 0.0381];

f=-(c(1)*exp(-(alpha(1,1)*(x(1,:)-p(1,1)).^2)-(alpha(1,2)*(x(2,:)-p(1,2)).^2)-(alpha(1,3)*(x(3,:)-p(1,3)).^2)-(alpha(1,4)*(x(4,:)-p(1,4)).^2)-(alpha(1,5)*(x(5,:)-p(1,5)).^2)-(alpha(1,6)*(x(6,:)-p(1,6)).^2))+...
    c(2)*exp(-(alpha(2,1)*(x(1,:)-p(2,1)).^2)-(alpha(2,2)*(x(2,:)-p(2,2)).^2)-(alpha(2,3)*(x(3,:)-p(2,3)).^2)-(alpha(2,4)*(x(4,:)-p(2,4)).^2)-(alpha(2,5)*(x(5,:)-p(2,5)).^2)-(alpha(2,6)*(x(6,:)-p(2,6)).^2))+...
    c(3)*exp(-(alpha(3,1)*(x(1,:)-p(3,1)).^2)-(alpha(3,2)*(x(2,:)-p(3,2)).^2)-(alpha(3,3)*(x(3,:)-p(3,3)).^2)-(alpha(3,4)*(x(4,:)-p(3,4)).^2)-(alpha(3,5)*(x(5,:)-p(3,5)).^2)-(alpha(3,6)*(x(6,:)-p(3,6)).^2))+...
    c(4)*exp(-(alpha(4,1)*(x(1,:)-p(4,1)).^2)-(alpha(4,2)*(x(2,:)-p(4,2)).^2)-(alpha(4,3)*(x(3,:)-p(4,3)).^2)-(alpha(4,4)*(x(4,:)-p(4,4)).^2)-(alpha(4,5)*(x(5,:)-p(4,5)).^2)-(alpha(4,6)*(x(6,:)-p(4,6)).^2)));
=====
Hartmann H16
-----
nv=16;
xlv=-1*ones(1,nv);
xuv=1*ones(1,nv);
-----
% n=16, x=[-1 0], optimum is 25.875
%(16, [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1],[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
%(16, [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1],[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1])
a=[ 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 1
    0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0
    0 0 1 0 0 0 1 0 1 1 0 0 0 1 0 0
    0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 0
    0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 1
    0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0
    0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0
    0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0
    0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1
    0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0
    0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
f=0;
    for i=1:16
       for j=1:16
           f=f+a(i,j)*(x(i,:).^2+x(i,:)+1) .* (x(j,:).^2+x(j,:)+1);    
       end
   end
=====
Griewank
-----
nv=2;
xlv=-100*ones(1,nv);
xuv=100*ones(1,nv);
-----
% n=2, x=[-100 100], optimum is 0
f=x(1,:).^2/200+x(2,:).^2/200-(cos(x(1,:)/sqrt(1))).*(cos(x(2,:)/sqrt(2)))+1;
=====
Rosenbrock 
-----
nv=10;
xlv=-5*ones(1,nv);
xuv=5*ones(1,nv);
-----
% (10, [-5 -5 -5 -5 -5 -5 -5 -5 -5 -5],[5 5 5 5 5 5 5 5 5 5]), optimum is 0
f=0;
for i=1:9
    f=f+(100*(x(i+1,:)-x(i,:).^2).^2+(x(i,:)-1).^2);
end
f
=====
T1
-----
nv=2;
xlv=-15*ones(1,nv);
xuv=10*ones(1,nv);
-----
% (n=2, optimization space: xlv=[-15 -15], xuv = [10 10])
[m n]=size(x);
constant=ones(1,n);
f=2.7183.^x(1,:).*(4.*x(1,:).^2+2.*x(2,:).^2+4.*x(1,:).*x(2,:)+2.*x(2,:)+1.*constant);
=====
ENGAPP1
-----
nv=3;
xlv=[2.5 2.5 0.1];
xuv = [10.0 10.0 1.0];
-----
% design of a two-member frame.  n=3, xlv=[2.5
% 2.5 0.1], xuv = [10.0 10.0 1.0]
f=200*(2*x(1,:).*x(3,:)+2*x(2,:).*x(3,:)-4*x(3,:).^2);
-----
% engineering application problem: 1, design of a two-member frame.  n=3, xlv=[2.5
% 2.5 0.1], xuv = [10.0 10.0 1.0]
% nonlinear inequality constraints
E=3.0e7;
G=1.154e7;
P=-10000;
L=100;
I=(1/12)*(x(1)*x(2).^3-(x(1)-2*x(3))*(x(2)-2*x(3)).^3);
size(I)
J=2*x(3)*((x(1)-x(3)).^2*(x(2)-x(3)).^2)/(x(1)+x(2)-2*x(3));
A=(x(1)-x(3))*(x(2)-x(3));
cm=[24 -6*L 6*L;-6*L (4*L.^2+G*J*L.^2/E/I) 0;6*L 0 (4*L.^2+G*J*L.^2/E/I)];
size(cm)
c=[-10000;0;0];
size(c)
u=(L.^3)/E/(I*(cm/c));
T=-G*J*u(3)/L;
M1=2*E*I*(-3*u(1)+u(2)*L)/(L.^2);
M2=2*E*I*(-3*u(1)+2*u(2)*L)/(L.^2);
tao=T/(2*A*x(3));
q1=M1*x(2)/(2*I);
q2=M2*x(2)/(2*I);
c=[(q1.^2+3*tao.^2).^.5-40000;(q2.^2+3*tao.^2).^.5-40000];
% nonlinear equality constraints
ceq=[];
=====
T2
-----
nv=2;
xlv=[-2 -2];
xuv=[2 2];
-----
f=5*x(1,:).^2+2*x(1,:).*x(2,:)+x(2,:).^2+7;
=====
ENGAPP2
-----
nv=4;
xlv=[25 25 1.0 .625];
xuv = [150 240 1.375 1.0];
-----
% design of a pressure vessel. n =4, xlv =
% [25 25 1.0 .625], [150 240 1.375 1.0]
f=.6224*x(3,:).*x(1,:).*x(2,:)+1.7781*x(4,:).*x(1,:).^2+3.1661*x(3,:).^2.*x(2,:)+19.84*x(3,:).^2.*x(1,:);
-----
% engineering application problem: 2, design of a pressure vessel. n =4, xlv =
% [25 25 1.0 .625], xuv=[150 240 1.375 1.0]
% nonlinear inequality constraints
c=[.0193*x(1)-x(3);.00954*x(1)-x(4);1.296e6-pi*x(1).^2*x(2)-4/3*pi*x(1).^3];
% nonlinear equality constraints
ceq=[];
=====
your example
-----
n=10
nv=10;
xuv=[];
xlv=[];
-----
for i=1:n
   f(1,i)=x(1,i)/(1+x(1,i).^2);
end
=====
simgaryrobust
-----
nob=2;
xuv=[];
xlv=[];
-----
f1= ((x(1,:)-4*constant).^3 + (x(1,:)-3*constant).^4 + (x(2,:)-5*constant).^2 + 10.0*constant)/5.10464;
f2= 1/0.416796*1/3.0*( (3.0*(x(1,:)-4.0*constant).^2 + 4.0*(x(1,:)-3.0*constant).^3).^2 + (2.0*(x(2,:)-5.0*constant)).^2).^0.5;
-----
%simgaryrobust
c=[-x(1)-x(2)+8.45];
ceq=[];
=====
HD1
-----
nv=10;
xlv=-3*ones(1,nv);
xuv=2*ones(1,nv);
-----
%Problem 1, (10, [-3 -3 -3 -3 -3 -3 -3 -3 -3 -3],[2 2 2 2 2 2 2 2 2 2])
f=(x(1,:)-1).^2+(x(10,:)-1).^2;
for i=1:9
    f=f+10*((10-i)*(x(i,:).^2-x(i+1,:)).^2);
end
=====
HD2
-----
nv=10;
xlv=-3*ones(1,nv);
xuv=3*ones(1,nv);
-----
% n=10, x=[-3 3]
%(10, [-3 -3 -3 -3 -3 -3 -3 -3 -3 -3], [3 3 3 3 3 3 3 3 3 3],0.1)
dim=10;
f=0;
for i=1:dim
	f=f+i^3*(x(i,:)-1).^2;
end
f=f.^3;
=====
HD5
-----
nv=20;
xlv=-2*ones(1,nv);
xuv=5*ones(1,nv);
-----
% n=20, x=[-2 5]
%(20, [-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2], [5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5],0.1)
dim=5;
f=0;
for i=1:dim
	f=f+((x(i,:)+10*x(i+5,:)).^2+5*(x(i+10,:)-x(i+15,:)).^2+(x(i+5,:)-2*x(i+10,:)).^4+10*(x(i,:)-x(i+15,:)).^4);
end
=====
HDGR
-----
nv=30;
xlv=-300*ones(1,nv);
xuv=900*ones(1,nv);
-----
% n=30 or 60, x=[-300 900], optimum is 0
%(30, [-300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300 -300],[900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900],0.1)
f=1;
f1=1;
for i=1:30
    f=f+x(i,:).^2/4000;
    f1=f1.*(cos(x(i,:)./sqrt(i)));
end
f=f-f1;
=====
HDAPHE
-----
nv=30;
xlv=-2.56*ones(1,nv);
xuv=7.68*ones(1,nv);
-----
% n=30 or 60, x=[-2.56 7.68], optimum 0
%(30, [-2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56], [7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68],0.1)
f=0;
for i=1:30
    f=f+i*x(i,:).^2;
end
=====
HDRF
-----
nv=10;
xlv=-2.56*ones(1,nv);
xuv=7.68*ones(1,nv);
-----
% n=10 or 20, x=[-2.56 7.68], optimum 0
%(10, [-2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56], [7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68],0.1)
%(20, [-2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56 -2.56], [7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68 7.68],0.1)
numdim=20;
f=10*numdim;
for i=1:numdim
    f=f+(x(i,:).^2-10*cos(2*pi*x(i,:)));
end
=====
Step
-----
nv=30;
xlv=-50*ones(1,nv);
xuv=150*ones(1,nv);
-----
% n=30 or 60, x=[-50 150], optimum 0 all -0.5 to
%0.5 inputs
%(30, [-50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50], [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150], 0.1)
%(60, [-50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50], [150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150], 0.1)
f=0;
for i=1:30
    f=f+(floor(x(i,:)+0.5)).^2;
end
=====
HDEP
-----
nv=30;
xlv=-0.5*ones(1,nv);
xuv=1.5*ones(1,nv);
-----
% n=30 or 60, x=[-0.5 1.5], optimum 1 for all
%0 inputs
%(30, [-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5], [1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5],0.1)
f=0;
for i=1:30
    f=f-0.5*(x(i,:)).^2;
end
f=exp(f);
=====
Zakharov
-----
nv=30;
xlv=-5*ones(1,nv);
xuv=10*ones(1,nv);
-----
% n=30 or 60, x=[-5 10], optimum 0
%(30, [-5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5], [10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10],0.1)
%(60, [-5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5], [10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10],0.1)
f=0;
f1=0;
dim=30;
for i=1:dim
    f=f+x(i,:).^2;
    f1=f1+(0.5*i*x(i,:));
end
f=f+f1.^2+f1.^4;
=====
Salomon
-----
nv=10;
xlv=-50*ones(1,nv);
xuv=150*ones(1,nv);
-----
% n=10 or 20, x=[-50 150], optimum 0 for all 0
%inputs
%(10, [-50 -50 -50 -50 -50 -50 -50 -50 -50 -50], [150 150 150 150 150 150 150 150 150 150], 0.1)
f=0;
f1=0;
dim=9;
for i=1:dim
    f1=f1+(x(i,:)).^2;
end
f1=sqrt(f1);
f=1-cos(2*pi*f1)+0.1*f1;
=====
HDSDP
-----
nv=30;
xlv=-0.5*ones(1,nv);
xuv=1.5*ones(1,nv);
-----
% n= 30 or 60, x=[-0.5 1.5], optimum 0
%for all 0 inputs
%(30, [-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5], [1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5],0.1)
%(60, [-0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5 -0.5], [1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5],0.1)
f=0;
for i=1:30
    f=f+(abs(x(i,:))).^(i+1);
end
=====
Peak
-----
nv=2;
xlv=-3*ones(1,nv);
xuv=3*ones(1,nv);
-----
%n=2, optimization space: xl=[-3 -3], xu = [3 3]),
f=3.*(1-x(1,:)).^2.*exp(-(x(1,:).^2) - (x(2,:)+1).^2) ...
    - 10.*(x(1,:)/5 - x(1,:).^3 - x(2,:).^5).*exp(-x(1,:).^2-x(2,:).^2) ...
    - (1/3).*exp(-(x(1,:)+1).^2 - x(2,:).^2);
=====
F6
-----
nv=2;
xlv=-2*ones(1,nv);
xuv=2*ones(1,nv);
-----
%n=2, 
num=sin(sqrt(x(1,:).^2+x(2,:).^2).^2);
den=(1.0+.01*(x(1,:).^2+x(2,:).^2)).^2;
f= (0.5+num./den);
=====
Banana
-----
nv=2;
xlv=-2*ones(1,nv);
xuv=2*ones(1,nv);
-----
%n=2, x=[-2 2]
f=100*(x(2,:)-x(1,:).^2).^2+(1-x(1,:)).^2;
=====
Ackley
-----
nv=2;
xlv=-15*ones(1,nv);
xuv=30*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n =2.
n = 2;
a = 20; b = 0.2; c = 2*pi;
s1 = 0; s2 = 0;
for i=1:n;
    s1 = s1+x(i,:).^2;
    s2 = s2+cos(c*x(i,:));
end
f = -a*exp(-b*sqrt(1/n*s1))-exp(1/n*s2)+a+exp(1);
=====
Beale
-----
nv=2;
xlv=-4.5*ones(1,nv);
xuv=4.5*ones(1,nv);
-----
% The number of variables n = 2.
f = (1.5-x(1,:)*(1-x(2,:))).^2+(2.25-x(1,:)*(1-x(2,:).^2)).^2+(2.625-x(1,:)*(1-x(2,:).^3)).^2;
=====
Bohachecsky
-----
nv=2;
xlv=-100*ones(1,nv);
xuv=100*ones(1,nv);
-----
% The number of variables n = 2.
f=x(1,:).^2+2*x(2,:).^2-0.3*cos(3*pi*x(1,:))-0.4*cos(4*pi*x(2,:))+0.7;
=====
Booth
-----
nv=2;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n = 2.
f  = (x(1,:)+2*x(2,:)-7).^2+(2*x(1,:)+x(2,:)-5).^2;
=====
Branin
-----
nv=2;
xlv=-5*ones(1,nv);
xuv=10*ones(1,nv);
-----
% optimization space: xl=[-5 0], xu = [10 15])
% The number of variables n = 2.
pi=3.1415926;
f = (x(2,:)-(5.1/(4*pi.^2))*x(1,:)^2+5*x(1,:)/pi-6)^2+10*(1-1/(8*pi))*cos(x(1,:))+10;
=====
Colville
-----
nv=4;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n = 4.
f  = 100.*(x(1,:).^2-x(2,:)).^2+(x(1,:)-1).^2+(x(3,:)-1).^2+90.*(x(3,:).^2-x(4,:)).^2+...
10.1.*((x(2,:)-1).^2+(x(4,:)-1).^2)+19.8.*(x(2,:).^-1).*(x(4,:)-1);
=====
Dixon
-----
nv=25;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 25.
% 
n = 25;
s1 = 0;
for j = 2:n;
    s1 = s1+j*(2*x(j)^2-x(j-1))^2;    
end
y = s1+(x(1,:)-1).^2;
=====
Easom
-----
nv=2;
xlv=-100*ones(1,nv);
xuv=100*ones(1,nv);
-----
% The number of variables n = 2.
f = -cos(x(1,:))*cos(x(2,:)).*exp(-(x(1,:)-pi).^2-(x(2,:)-pi).^2);
=====
Goldstein and Price function GP
-----
nv=2;
xlv=-2*ones(1,nv);
xuv=2*ones(1,nv);
-----
% The number of variables n = 2.
a = 1+(x(1,:)+x(2,:)+1)^2*(19-14*x(1,:)+3*x(1,:)^2-14*x(2,:)+6*x(1,:)*x(2,:)+3*x(2,:).^2);
b = 30+(2*x(1,:)-3*x(2,:)).^2*(18-32*x(1,:)+12*x(1,:)^2+48*x(2,:)-36*x(1,:)*x(2,:)+27*x(2,:).^2);
f = a.*b;
=====
Griewank1
-----
nv=2;
xlv=-600*ones(1,nv);
xuv=600*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n =2.
% 
n = 2;
fr = 4000;
s = 0;
p = 1;
for j = 1:n; s = s+x(j)^2; end
for j = 1:n; p = p*cos(x(j)/sqrt(j)); end
f = s/fr-p+1;
=====
Hartmann H3
-----
nv=3;
xlv=-0*ones(1,nv);
xuv=1*ones(1,nv);
-----
% The number of variables n = 3.
a(:,2)=10.0*ones(4,1);
for j=1:2;
   a(2*j-1,1)=3.0; a(2*j,1)=0.1; 
   a(2*j-1,3)=30.0; a(2*j,3)=35.0; 
end
c(1)=1.0;c(2)=1.2;c(3)=3.0;c(4)=3.2;
p(1,1)=0.36890;p(1,2)=0.11700;p(1,3)=0.26730;
p(2,1)=0.46990;p(2,2)=0.43870;p(2,3)=0.74700;
p(3,1)=0.10910;p(3,2)=0.87320;p(3,3)=0.55470;
p(4,1)=0.03815;p(4,2)=0.57430;p(4,3)=0.88280;
s = 0;
for i=1:4;
   sm=0;
   for j=1:3;
      sm=sm+a(i,j)*(x(j,:)-p(i,j)).^2;
   end
   s=s+c(i).*exp(-sm);
end
f = -s;
=====
Hump
-----
nv=2;
xlv=-5*ones(1,nv);
xuv=5*ones(1,nv);
-----
% The number of variables n = 2.
f=1.0316285+4*x(1,:).^2-2.1*x(1,:).^4+x(1,:).^6/3+x(1,:).*x(2,:)-4*x(2,:).^2+4*x(2,:).^4;
=====
Levy
-----
nv=30;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n =2.
% 
n = 30;
for i = 1:n; z(i) = 1+(x(i,:)-1)/4; end
s = sin(pi*z(1)).^2;
for i = 1:n-1
    s = s+(z(i)-1).^2*(1+10*(sin(pi*z(i)+1)).^2);
end 
f = s+(z(n)-1).^2*(1+(sin(2*pi*z(n))).^2);
=====
Matyas
-----
nv=2;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n =2.
f = 0.26*(x(1,:).^2+x(2,:).^2)-0.48*x(1,:).*x(2,:);
=====
Michalewicz
-----
nv=2;
xlv=-0*ones(1,nv);
xuv=3.14*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n =2.
% 
n = 2; 
m = 10;
s = 0;
for i = 1:n;
    s = s+sin(x(i,:))*(sin(i*x(i,:).^2/pi)).^(2*m);
end
f = -s;
=====
Perm
-----
nv=4;
xlv=-4*ones(1,nv);
xuv=4*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 4.
% 
n = 4;
b = 0.5;
s_out = 0;
for k = 1:n;
    s_in = 0;
    for j = 1:n
        s_in = s_in+(j^k+b).*((x(j,:)./j).^k-1);
    end
    s_out = s_out+s_in.^2;
end
f = s_out;
=====
Powell
-----
nv=2;
xlv=-4*ones(1,nv);
xuv=5*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 24.
% 
n = 24;
m = n;
for i = 1:m/4
    fvec(4*i-3) = x(4*i-3)+10.*(x(4*i-2));
    fvec(4*i-2) = sqrt(5).*(x(4*i-1)-x(4*i));
    fvec(4*i-1) = (x(4*i-2)-2.*(x(4*i-1))).^2;
    fvec(4*i)   = sqrt(10).*(x(4*i-3)-x(4*i)).^2;
end;
fvec = fvec';
f = norm(fvec).^2;
=====
Power
-----
nv=4;
xlv=0*ones(1,nv);
xuv=4*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 4.
% 
n = 4;
b = [8,18,44,114];
s_out = 0;
for k = 1:n;
    s_in = 0;
    for j = 1:n
        s_in = s_in+x(j,:).^k;
    end
    s_out = s_out+(s_in-b(k)).^2;
end
f = s_out;
=====
Rastrigin1
-----
nv=2;
xlv=-5.12*ones(1,nv);
xuv=5.12*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 2.
% 
n = 2; 
s = 0;
for j = 1:n
    s = s+(x(j)^2-10*cos(2*pi*x(j))); 
end
f = 10*n+s;
=====
Rosenbrock1
-----
nv=2;
xlv=-5*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 2.
% 
n = 2;
sum = 0;
for j = 1:n-1;
    sum = sum+100*(x(j,:).^2-x(j+1)).^2+(x(j,:)-1).^2;
end
f = sum;
=====
Schwefel
-----
nv=2;
xlv=-500*ones(1,nv);
xuv=500*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 2.
% 
n = 2;
s = sum(-x.*sin(sqrt(abs(x))));
f = 418.9829*n+s;
=====
Shekel
-----
nv=4;
xlv=0*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n = 4
% The parameter m should be adjusted m = 5,7,10.
% The default value of m = 10.
% 
m = 10;
a = ones(10,4);
a(1,:) = 4.0*a(1,:);
a(2,:) = 1.0*a(2,:);
a(3,:) = 8.0*a(3,:);
a(4,:) = 6.0*a(4,:);
for j = 1:2;
   a(5,2*j-1) = 3.0; a(5,2*j) = 7.0; 
   a(6,2*j-1) = 2.0; a(6,2*j) = 9.0; 
   a(7,j)     = 5.0; a(7,j+2) = 3.0;
   a(8,2*j-1) = 8.0; a(8,2*j) = 1.0;
   a(9,2*j-1) = 6.0; a(9,2*j) = 2.0;
   a(10,2*j-1)= 7.0; a(10,2*j)= 3.6;
end
c(1) = 0.1; c(2) = 0.2; c(3) = 0.2; c(4) = 0.4; c(5) = 0.4;
c(6) = 0.6; c(7) = 0.3; c(8) = 0.7; c(9) = 0.5; c(10)= 0.5;
s = 0;
for j = 1:m;
   p = 0;
   for i = 1:4
      p = p+(x(i,:)-a(j,i)).^2;
   end
   s = s+1/(p+c(j));
end
f = -s;
=====
Shubert
-----
nv=2;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n =2.
% 
s1 = 0; 
s2 = 0;
for i = 1:5;   
    s1 = s1+i*cos((i+1)*x(1,:)+i);
    s2 = s2+i*cos((i+1)*x(2,:)+i);
end
f = s1.*s2;
=====
Sphere
-----
nv=10;
xlv=-5.12*ones(1,nv);
xuv=5.12*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 30.
% 
n = 30;
s = 0;
for j = 1:n
    s = s+x(j,:).^2; 
end
f = s;
=====
Sum Squares
-----
nv=20;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 20.
% 
n = 20;
s = 0;
for j = 1:n  
    s=s+j*x(j,:).^2; 
end
f = s;
=====
Trid
-----
nv=10;
xlv=-100*ones(1,nv);
xuv=100*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 10.
% 
n = 10;
s1 = 0;
s2 = 0;
for j = 1:n;
    s1 = s1+(x(j,:)-1).^2;    
end
for j = 2:n;
    s2 = s2+x(j,:).*x(j-1);    
end
f = s1-s2;
=====
Zakharov1
-----
nv=2;
xlv=-5*ones(1,nv);
xuv=10*ones(1,nv);
-----
% The number of variables n should be adjusted below.
% The default value of n = 2.
% 
n = 2;
s1 = 0;
s2 = 0;
for j = 1:n;
    s1 = s1+x(j,:).^2;
    s2 = s2+0.5*j*x(j,:);
end
f = s1+s2.^2+s2.^4;
=====
G1
-----
nv=13;
xlv=0*ones(1,nv);
xuv=[1 1 1 1 1 1 1 1 1 100 100 100 1];
-----
%x1 = x(1:4); x2 = x(5:13);
f = 5.*sum(x(1,:))-5.*sum(x(1,:).*x(1,:))-sum(x(2,:));
-----
% nonlinear inequality constraints
c=[2.*x(1)+2.*x(2)+x(10)+x(11)-10; 2.*x(1)+2.*x(3)+x(10)+x(12)-10; 2.*x(2)+2.*x(3)+x(11)+x(12)-10; -8.*x(1)+x(10); -8.*x(2)+x(11); -8.*x(3)+x(12); -2.*x(4)-x(5)+x(10); -2.*x(6)-x(7)+x(11); -2.*x(8)-x(9)+x(12)];
% nonlinear equality constraints
ceq=[];
=====
G2
-----
nv=2;
xlv=0*ones(1,nv);
xuv=10*ones(1,nv);
-----
n = 2; 
sum_jx = 0;
for j=1:n; sum_jx = sum_jx+j.*x(j,:).^2; end
f = abs((sum(cos(x).^4)-2.*prod(cos(x).^2))./sqrt(sum_jx));
-----
% nonlinear inequality constraints
n = 2;
c=[-prod(x)+0.75; sum(x)-7.5.*n];
% nonlinear equality constraints
ceq=[];
=====
G3
-----
nv=2;
xlv=0*ones(1,nv);
xuv=1*ones(1,nv);
-----
n = length(x);
f = -sqrt(n).^n*prod(x);
-----
% nonlinear inequality constraints
c=[];
% nonlinear equality constraints
ceq=[abs(sum(x^2)-1)-1e-4];
=====
G4
-----
nv=5;
xlv=[78 33 27 27 27];
xuv=[102 45 45 45 45];
-----
f = 5.3578547*x(3,:).^2+0.8356891*x(1,:).*x(5,:)+37.293239*x(1,:)-40792.141;
-----
% nonlinear inequality constraints
u = 85.334407+0.0056858*x(2,:).*x(5,:)+0.0006262*x(1,:).*x(4,:)-0.0022053*x(3,:).*x(5,:);
v = 80.51249+0.0071317.*x(2,:).*x(5,:)+0.0029955.*x(1,:).*x(2,:)+0.0021813*x(3,:).^2;
w = 9.300961+0.0047026*x(3,:).*x(5,:)+0.0012547*x(1,:).*x(3,:)+0.0019085*x(3,:).*x(4,:);
c=[-u; u-92; -v+90; v-110; -w+20; w-25];
% nonlinear equality constraints
ceq=[];
=====
G5
-----
nv=4;
xlv=[0 0 -0.55 -0.55];
xuv=[1200 1200 0.55 0.55];
-----
f = 3.*x(1,:)+1e-6.*x(1,:).^3+2.*x(2,:)+2e-6/3.*x(2,:).^3;
-----
% nonlinear inequality constraints
c=[x(3)-x(4)-0.55; x(4)-x(3)-0.55; abs(1000*(sin(-x(3)-0.25)+sin(-x(4)-0.25))+894.8-x(1))-1e-4;...
    abs(1000*(sin(x(3)-0.25)+sin(x(3)-x(4)-0.25))+894.8-x(2))-1e-4; abs(1000*(sin(x(4)-0.25)+...
    sin(x(4)-x(3)-0.25))+1294.8)-1e-4];
% nonlinear equality constraints
ceq=[];
=====
G6
-----
nv=2;
xlv=[13 0];
xuv=[100 100];
-----
f = (x(1,:)-10).^3+(x(2,:)-20).^3;
-----
% nonlinear inequality constraints
c=[-(x(1)-5).^2-(x(2)-5).^2+100; (x(1)-6).^2+(x(2)-5).^2-82.81];
% nonlinear equality constraints
ceq=[];
=====
G7
-----
nv=10;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
f=x(1,:).^2+x(2,:).^2+x(1,:).*x(2)-14*x(1,:)-16*x(2,:)+(x(3,:)-10).^2+...
    4*(x(4,:)-5).^2+(x(5,:)-3).^2+2*(x(6,:)-1).^2+5*x(7,:).^2+...
    7*(x(8,:)-11).^2+2*(x(9,:)-10).^2+(x(10,:)-7).^2+45;
-----
% nonlinear inequality constraints
c=[4*x(1)+5*x(2)-3*x(7)+9*x(8)-105; 10*x(1)-8*x(2)-17*x(7)+2*x(8);...    
-8*x(1)+2*x(2)+5*x(9)-2*x(10)-12; 3*(x(1)-2)^2+4*(x(2)-3)^2+2*x(3)^2-7*x(4)-120;...      
5*x(1)^2+8*x(2)+(x(3)-6)^2-2*x(4)-40; 0.5*(x(1)-8)^2+2*(x(2)-4)^2+3*x(5)^2-x(6)-30;... 
x(1)^2+2*(x(2)-2)^2-2*x(1)*x(2)+14*x(5)-6*x(6); -3*x(1)+6*x(2)+12*(x(9)-8)^2-7*x(10)];
% nonlinear equality constraints
ceq=[];
=====
G8
-----
nv=2;
xlv=0*ones(1,nv);
xuv=10*ones(1,nv);
-----
f = -(sin(2.*pi.*x(1,:)).^3.*sin(2.*pi.*x(2,:)))./(x(1,:).^3.*(x(1,:)+x(2,:)));
-----
% nonlinear inequality constraints
c=[x(1).^2-x(2)+1; 1-x(1)+(x(2)-4).^2];
% nonlinear equality constraints
ceq=[];
=====
G9
-----
nv=7;
xlv=-10*ones(1,nv);
xuv=10*ones(1,nv);
-----
f=(x(1,:)-10).^2+5*(x(2,:)-12).^2+x(3,:).^4+3*(x(4,:)-11).^2+...
    10*x(5,:).^6+7*x(6,:).^2+x(7).^4-4*x(6,:).*x(7,:)-10*x(6,:)-8*x(7,:);
-----
% nonlinear inequality constraints
v1 = 2*x(1)^2;
v2 = x(2)^2;
c=[ v1+3*v2^2+x(3)+4*x(4)^2+5*x(5)-127; 7*x(1)+3*x(2)+10*x(3)^2+x(4)-x(5)-282;...
23*x(1)+v2+6*x(6)^2-8*x(7)-196; 2*v1+v2-3*x(1)*x(2)+2*x(3)^2+5*x(6)-11*x(7)];
% nonlinear equality constraints
ceq=[];
=====
G10
-----
nv=8;
xlv=10*[10 100 100 1 1 1 1 1];
xuv=1000*[10 10 10 1 1 1 1 1];
-----
f=x(1,:)+x(2,:)+x(3,:);
-----
% nonlinear inequality constraints
c=[ -1+0.0025*(x(4)+x(6)); -1+0.0025*(-x(4)+x(5)+x(7)); -1+0.01*(-x(5)+x(8));...
100*x(1)-x(1)*x(6)+833.33252*x(4)-83333.333; x(2)*x(4)-x(2)*x(7)-1250*x(4)+1250*x(5);...
x(3)*x(5)-x(3)*x(8)-2500*x(5)+1250000];
% nonlinear equality constraints
ceq=[];
=====
G11
-----
nv=2;
xlv=-1*ones(1,nv);
xuv=1*ones(1,nv);
-----
f=x(1,:).^2+(x(2,:)-1).^2;
-----
% nonlinear inequality constraints
c=[ abs(x(2)-x(1)^2)-1e-4];
% nonlinear equality constraints
ceq=[];
=====
G12
-----
nv=3;
xlv=0*ones(1,nv);
xuv=10*ones(1,nv);
-----
f=-(1-0.01*((x(1,:)-5).^2+(x(2,:)-5).^2+(x(3,:)-5).^2));
-----
% nonlinear inequality constraints
for p=1:9
    for q=1:9
        for r=1:9
            z(p,q,r) = (x(1)-p)^2+(x(2)-q)^2+(x(3)-r)^2-0.0625;
        end
    end
end
for p=1:9
    for q=1:9
        Z1(p,q) = min(z(p,q,:));    
    end
    Z2(p) = min(Z1(p,:));
end
y = min(Z2);
c=[y];
% nonlinear equality constraints
ceq=[];
=====
G13
-----
nv=5;
xlv=[-2.3 -2.3 -3.2 -3.2 -3.2];
xuv=[2.3 2.3 3.2 3.2 3.2];
-----
f = exp(prod(x));
-----
% nonlinear inequality constraints
c=[abs(sum(x(:).^2)-10)-1e-4; abs(x(2)*x(3)-5*x(4)*x(5))-1e-4; abs(x(1).^3+x(2).^3+1)-1e-4];
% nonlinear equality constraints
ceq=[];
=====
ENGAPP3
-----
nv=4;
xuv=[10 10 10 10];
xlv=[0.125 0.1 0.1 0.1];
-----
f = 1.10471*x(1,:).^2.*x(2,:)+0.04811*x(3,:).*x(4,:).*(14.0+x(2,:));
-----
%Welded beam Design 
P = 6000; L = 14; E = 30e+6; G = 12e+6;
t_max = 13600; s_max = 30000; d_max = 0.25;
M = P*(L+x(2)/2); R = sqrt(0.25*(x(2)^2+(x(1)+x(3))^2));
J = 2/sqrt(2)*x(1)*x(2)*(x(2)^2/12+0.25*(x(1)+x(3))^2);
P_c = (4.013*E/(6*L^2))*x(3)*x(4)^3*(1-0.25*x(3)*sqrt(E/G)/L);
t1 = P/(sqrt(2)*x(1)*x(2)); t2 = M*R/J;
t = sqrt(t1^2+t1*t2*x(2)/R+t2^2);
s = 6*P*L/(x(4)*x(3)^2);
d = 4*P*L^3/(E*x(4)*x(3)^3);
% nonlinear inequality constraints
 c=[t-t_max; s-s_max;x(1)-x(4); 0.10471*x(1).^2+0.04811*x(3).*x(4)*(14.0+x(2))-5.0; d-d_max; P-P_c];
% nonlinear equality constraints
ceq=[];
=====
ENGAPP4
-----
nv=3;
xlv=0*ones(1,nv);
xuv=100*ones(1,nv);
-----
f=x(1,:).^2.*x(2,:).*(x(3,:)+2);
-----
%Tension-Compresion String
% nonlinear inequality constraints
 c=[1-(x(2).^3*x(3))/(71785.*x(1).^4); (4.*x(2).^2-x(1).*x(2))/(12566*x(1).^3*(x(2)-x(1)))+1/(5108.*x(1).^2)-1; 1-140.45.*x(1)/(x(3).*x(2).^2); (x(1)+x(2))/1.5-1];
% nonlinear equality constraints
ceq=[];
=====
ENGAPP5
-----
nv=4;
xlv=[1 0.625 25 25];
xuv=[1.375 1 150 240];
-----
f = 0.6224.*x(1,:).*x(3,:).*x(4,:)+1.7781.*x(2,:).*x(3,:).^2+3.1661.*x(1,:).^2.*x(4,:)+19.84.*x(1,:).^2.*x(3,:);
-----
%Pressure vessel design 
c=[-x(1)+0.0193*x(3); -x(2)+0.00954*x(3); -pi*x(3)^2*x(4)-(4/3)*pi*x(3)^3+1296000; x(4)-240];
ceq=[];
=====
ENGAPP6
-----
nv=10;
xlv=[1 30 1 30 1 30 1 30 1 30];
xuv=[5 65 5 65 5 65 5 65 5 65];
-----
f=x(1,:).*x(2,:)*100+x(3,:).*x(4,:)*100+x(5,:).*x(6,:)*100+x(7,:).*x(8,:)*100+x(9,:).*x(10,:)*100;
-----
%steppened cantilver beam
l1=100;
l2=100;
l3=100;
l4=100;
l5=100;
E=2e07;
P=50000;
L=500;
I1=(x(9).*x(10).^3)/12;
I2=(x(7).*x(8).^3)/12;
I3=(x(5).*x(6).^3)/12;
I4=(x(3).*x(4).^3)/12;
I5=(x(1).*x(2).^3)/12;
% nonlinear inequality constraints
 c=[((6*P*l5)/(x(9).*x(10).^2))-14000; ((6*P*(l5+l4))/(x(7).*x(8).^2))-14000; ((6*P*(l5+l4+l3))/(x(5).*x(6).^2))-14000;...
     ((6*P*(l5+l4+l3+l2))/(x(3).*x(4).^2))-14000; ((6*P*(l5+l4+l3+l2+l1))/(x(1).*x(2).^2))-14000; (((P*(L/5)^3)/(3*E)).*((1/I5)+(7/I4)+(19/I3)+(37/I2)+(61/I1))-2.7);...
     (x(10)/x(9))-20; (x(8)/x(7))-20; (x(6)/x(5))-20; (x(4)/x(3))-20; (x(2)/x(1))-20];
% nonlinear equality constraints
ceq=[];
=====
ENGAPP7
-----
nob=2;
nv=4;
xlv=[10 10 0.9 0.9];
xuv=[80 50 5 5];
-----
n=size(x);
for i=1:n
   f1(i)=5000/(1/12*x(3,i).*(x(1,i)-2*x(4,i)).^3+(2/12).*x(2,i).*x(4,i).^3+2*x(2,i).*x(4,i).*((x(1,i)-x(4,i))./2).^2);
   f2(i)=2*x(2,i).*x(4,i)+x(3,i).*(x(1,i)-2*x(4,i));
end
f=[f1' f2'];
-----
c=[180000*x(1)./(x(3)*(x(1)-2*x(4)).^3+...
    2*x(2)*x(4)*(4*x(4).^2+3*x(1)*(x(1)-2*x(4))))+...
    15000*x(2)/((x(1)-2*x(4))*x(3).^3+2*x(4)*x(2).^3)-16];
ceq=[];
=====
UF1
-----
nob=2;
xlv=[0 -1 -1];
xuv=[1 1 1];
-----
% n=3, xlv=[0 0 0], xuv=[1 1 1]
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
[dim, num]  = size(x);
tmp         = zeros(dim,num);
tmp(2:dim,:)= (x(2:dim,:) - sin(6.0*pi.*repmat(x(1,:),[dim-1,1]) + pi/dim.*repmat((2:dim)',[1,num]))).^2;
tmp1        = sum(tmp(3:2:dim,:));  % odd index
tmp2        = sum(tmp(2:2:dim,:));  % even index
f1          = x(1,:)             + 2.0.*tmp1./size(3:2:dim,2);
f2          = 1.0 - sqrt(x(1,:)) + 2.0.*tmp2./size(2:2:dim,2);
f=[f1' f2'];
clear tmp;
=====
UF2
-----
nob=2;
xlv=[0 -1 -1];
xuv=[1 1 1];
-----
% n=3, xlv=[0 -1 -1], xuv=[1 1 1]
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
[dim, num]  = size(x);
X1          = repmat(x(1,:),[dim-1,1]);
A           = 6*pi*X1 + pi/dim*repmat((2:dim)',[1,num]);
tmp         = zeros(dim,num);
tmp(2:dim,:)= (x(2:dim,:) - 0.3*X1.*(X1.*cos(4.0*A)+2.0).*cos(A)).^2;
tmp1        = sum(tmp(3:2:dim,:));  % odd index
tmp(2:dim,:)= (x(2:dim,:) - 0.3*X1.*(X1.*cos(4.0*A)+2.0).*sin(A)).^2;
tmp2        = sum(tmp(2:2:dim,:));  % even index
f1      = x(1,:)             + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - sqrt(x(1,:)) + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
clear X1 A tmp;
=====
UF3
-----
nob=2;
xlv=[0 0 0];
xuv=[1 1 1];
-----
% n=3, xlv=[0 0 0], xuv=[1 1 1]
%x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
[dim, num]   = size(x);
Y            = zeros(dim,num);
Y(2:dim,:)   = x(2:dim,:) - repmat(x(1,:),[dim-1,1]).^(0.5+1.5*(repmat((2:dim)',[1,num])-2.0)/(dim-2.0));
tmp1         = zeros(dim,num);
tmp1(2:dim,:)= Y(2:dim,:).^2;
tmp2         = zeros(dim,num);
tmp2(2:dim,:)= cos(20.0*pi*Y(2:dim,:)./sqrt(repmat((2:dim)',[1,num])));
tmp11        = 4.0*sum(tmp1(3:2:dim,:)) - 2.0*prod(tmp2(3:2:dim,:)) + 2.0;  % odd index
tmp21        = 4.0*sum(tmp1(2:2:dim,:)) - 2.0*prod(tmp2(2:2:dim,:)) + 2.0;  % even index
f1       = x(1,:)             + 2.0*tmp11/size(3:2:dim,2);
f2       = 1.0 - sqrt(x(1,:)) + 2.0*tmp21/size(2:2:dim,2);
f=[f1' f2'];
clear Y tmp1 tmp2;
=====
UF4
-----
nob=2;
xlv=[0 -2 -2];
xuv=[1 2 2];
-----
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
%n=3, xlv=[0 -2 -2], xuv=[1 2 2]
[dim, num]  = size(x);
Y           = zeros(dim,num);
Y(2:dim,:)  = x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]));
H           = zeros(dim,num);
H(2:dim,:)  = abs(Y(2:dim,:))./(1.0+exp(2.0*abs(Y(2:dim,:))));
tmp1        = sum(H(3:2:dim,:));  % odd index
tmp2        = sum(H(2:2:dim,:));  % even index
f1      = x(1,:)          + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - x(1,:).^2 + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
clear Y H;
=====
UF5
-----
nob=2;
xlv=[0 -1 -1];
xuv=[1 1 1];
-----
% n=3, xlv=[0 -1 -1], xuv=[1 1 1]
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
N           = 10.0;
E           = 0.1;
[dim, num]  = size(x);
Y           = zeros(dim,num);
Y(2:dim,:)  = x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]));
H           = zeros(dim,num);
H(2:dim,:)  = 2.0*Y(2:dim,:).^2 - cos(4.0*pi*Y(2:dim,:)) + 1.0;
tmp1        = sum(H(3:2:dim,:));  % odd index
tmp2        = sum(H(2:2:dim,:));  % even index
tmp         = (0.5/N+E)*abs(sin(2.0*N*pi*x(1,:)));
f1      = x(1,:)      + tmp + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - x(1,:)+ tmp + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
clear Y H;
=====
UF7
-----
nob=2;
xlv=[0 -1 -1];
xuv=[1 1 1];
-----
% n=3, xlv=[0 -1 -1], xuv=[1 1 1]
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
[dim, num]  = size(x);
Y           = zeros(dim,num);
Y(2:dim,:)  = (x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]))).^2;
tmp1        = sum(Y(3:2:dim,:));  % odd index
tmp2        = sum(Y(2:2:dim,:));  % even index
tmp         = (x(1,:)).^0.2;
f1      = tmp       + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - tmp + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
clear Y;
=====
TF1
-----
nob=2;
xlv=[.4 2];
xuv = [1.6 5];
-----
% following parameters are shared by some of functions
[m n]=size(x);
constant=ones(1,n);
% test problem 1 (optimization space: xlv=[.4 2], xuv = [1.6 5]
f1=(x(1,:)-2.*constant).^2+(x(2,:)-constant).^2;
f2=x(1,:).^2+(x(2,:)-6.*constant).^2;
f=[f1' f2'];
-----
% nonlinear inequality constraints
c=[x(1)-1.6; 0.4-x(1); x(2)-5;2-x(2)];
% nonlinear equality constraints
ceq=[];
=====
TF2
-----
nob=2;
nv=2;
xlv=[0 0];
xuv=[5 3];
-----
[m n]=size(x);
constant=ones(1,n);
f1=(x(1,:)+x(2,:)-7.5*constant).^2+(x(2,:)-x(1,:)+3*constant).^2/4;
f2=(x(1,:)-constant).^2/4+(x(2,:)-4*constant).^2/2;
f=[f1' f2'];
-----
% nonlinear inequality constraints
c=[x(2)+(x(1)-2).^3/2-2.5; x(1)+x(2)-8*(x(2)-x(1)+0.65).^2-3.85];
% nonlinear inequality constraints
ceq=[];
=====
TF3
-----
nob=3;
nv=3;
xlv=[0 0 0];
xuv=[5 5 5];
-----
[m n]=size(x);
constant=ones(1,n);
f1=25.*constant-(x(1,:).^3+x(1,:).^2.*(1.*constant+x(2,:)+x(3,:))+x(2,:).^3+x(3,:).^3)/10;
f2=35.*constant-(x(1,:).^3+2*x(2,:).^3+x(2,:).^2.*(2.*constant+x(1,:)+x(3,:))+x(3,:).^3)/10;
f3=50.*constant-(x(1,:).^3+x(2,:).^3+3*x(3,:).^3+x(3,:).^2.*(3.*constant+x(1,:)+x(2,:)))/10;
f=[f1' f2' f3'];
-----
% nonlinear inequality constraints
c=[x(1).^2+x(2).^2+x(3).^2-12];
% nonlinear equality constraints
ceq=[];
=====
CF1
-----
nob=2;
nv=2; %or nv=10
xlv=0*ones(1,nv);
xuv=1*ones(1,nv);
-----
%The search space is [0; 1]n
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
a            = 1.0;
N            = 10.0;
[dim, num]   = size(x);
Y            = zeros(dim,num);
Y(2:dim,:)   = (x(2:dim,:) - repmat(x(1,:),[dim-1,1]).^(0.5+1.5*(repmat((2:dim)',[1,num])-2.0)/(dim-2.0))).^2;
tmp1         = sum(Y(3:2:dim,:));% odd index
tmp2         = sum(Y(2:2:dim,:));% even index
f1       = x(1,:)       + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - x(1,:) + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
clear Y;
-----
a            = 1.0;
N            = 10.0;
[dim, num]   = size(x);
Y            = zeros(dim,num);
Y(2:dim,:)   = (x(2:dim,:) - repmat(x(1,:),[dim-1,1]).^(0.5+1.5*(repmat((2:dim)',[1,num])-2.0)/(dim-2.0))).^2;
tmp1         = sum(Y(3:2:dim,:));% odd index
tmp2         = sum(Y(2:2:dim,:));% even index
f1       = x(1,:)       + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - x(1,:) + 2.0*tmp2/size(2:2:dim,2);
f=[f1'; f2'];
t           = f(2,:) + sqrt(f(1,:)) - a*sin(N*pi*(sqrt(f(1,:))-f(2,:)+1.0)) - 1.0;
% nonlinear inequality constraints
c=[-sign(t).*abs(t)./(1.0+exp(4.0*abs(t)))];
% nonlinear inequality constraints
ceq=[];
=====
CF2
-----
nob=2;
nv=3;
xlv=[0 -1 -1];
xuv=[1 1 1];
-----
% n, [0 1], [-1 1]^n-1
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
a           = 1.0;
N           = 2.0;
[dim, num]  = size(x);
tmp         = zeros(dim,num);
tmp(2:dim,:)= (x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]))).^2;
tmp1        = sum(tmp(3:2:dim,:));  % odd index
tmp(2:dim,:)= (x(2:dim,:) - cos(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]))).^2;
tmp2        = sum(tmp(2:2:dim,:));  % even index
f1      = x(1,:)             + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - sqrt(x(1,:)) + 2.0*tmp2/size(2:2:dim,2);
f=[f1' f2'];
-----
a           = 1.0;
N           = 2.0;
[dim, num]  = size(x);
tmp         = zeros(dim,num);
tmp(2:dim,:)= (x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]))).^2;
tmp1        = sum(tmp(3:2:dim,:));  % odd index
tmp(2:dim,:)= (x(2:dim,:) - cos(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]))).^2;
tmp2        = sum(tmp(2:2:dim,:));  % even index
f1      = x(1,:)             + 2.0*tmp1/size(3:2:dim,2);
f2      = 1.0 - sqrt(x(1,:)) + 2.0*tmp2/size(2:2:dim,2);
f=[f1; f2];
t           = f2 + sqrt(f1) - a*sin(N*pi*(sqrt(f1)-f2+1.0)) - 1.0;
% nonlinear inequality constraints
c=[sign(t).*abs(t)./(1.0+exp(4.0*abs(t)))];
% nonlinear inequality constraints
ceq=[];
clear temp
=====
CF3
-----
nob=2;
nv=10;
xlv=[0 -2 -2 -2 -2 -2 -2 -2 -2 -2];
xuv=[1 2 2 2 2 2 2 2 2 2];
-----
% n, [0 1], [-2 2]^n-1
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
a            = 1.0;
N            = 2.0;
[dim, num]   = size(x);
Y            = zeros(dim,num);
Y(2:dim,:)   = x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]));
tmp1         = zeros(dim,num);
tmp1(2:dim,:)= Y(2:dim,:).^2;
tmp2         = zeros(dim,num);
tmp2(2:dim,:)= cos(20.0*pi*Y(2:dim,:)./sqrt(repmat((2:dim)',[1,num])));
tmp11        = 4.0*sum(tmp1(3:2:dim,:)) - 2.0*prod(tmp2(3:2:dim,:)) + 2.0;  % odd index
tmp21        = 4.0*sum(tmp1(2:2:dim,:)) - 2.0*prod(tmp2(2:2:dim,:)) + 2.0;  % even index
f1       = x(1,:)          + 2.0*tmp11/size(3:2:dim,2);
f2       = 1.0 - x(1,:).^2 + 2.0*tmp21/size(2:2:dim,2);
f=[f1' f2'];
-----
a            = 1.0;
N            = 2.0;
[dim, num]   = size(x);
Y            = zeros(dim,num);
Y(2:dim,:)   = x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]));
tmp1         = zeros(dim,num);
tmp1(2:dim,:)= Y(2:dim,:).^2;
tmp2         = zeros(dim,num);
tmp2(2:dim,:)= cos(20.0*pi*Y(2:dim,:)./sqrt(repmat((2:dim)',[1,num])));
tmp11        = 4.0*sum(tmp1(3:2:dim,:)) - 2.0*prod(tmp2(3:2:dim,:)) + 2.0;  % odd index
tmp21        = 4.0*sum(tmp1(2:2:dim,:)) - 2.0*prod(tmp2(2:2:dim,:)) + 2.0;  % even index
f1       = x(1,:)          + 2.0*tmp11/size(3:2:dim,2);
f2       = 1.0 - x(1,:).^2 + 2.0*tmp21/size(2:2:dim,2);
% nonlinear inequality constraints
c= [f2 + f1.^2 - a*sin(N*pi*(f1.^2-f2+1.0)) - 1.0];
% nonlinear inequality constraints
ceq=[];
clear Y tmp1 tmp2;
=====
CF4
-----
nob=2;
nv=2;
xlv=[0 1 1];
xuv=[1 2 2];
-----
% n, [0 1], [-2 2]^n-1
% x and f are columnwise, the imput x must be inside the search space and
% it could be a matrix
[dim, num]  = size(x);
tmp         = zeros(dim,num);
tmp(2:dim,:)= x(2:dim,:) - sin(6.0*pi*repmat(x(1,:),[dim-1,1]) + pi/dim*repmat((2:dim)',[1,num]));
tmp1        = sum(tmp(3:2:dim,:).^2);  % odd index
tmp2        = sum(tmp(4:2:dim,:).^2);  % even index
index1      = tmp(2,:) < (1.5-0.75*sqrt(2.0));
index2      = tmp(2,:)>= (1.5-0.75*sqrt(2.0));
tmp(2,index1) = abs(tmp(2,index1));
tmp(2,index2) = 0.125 + (tmp(2,index2)-1.0).^2;
f1      = x(1,:)                  + tmp1;
f2      = 1.0 - x(1,:) + tmp(2,:) + tmp2;
f=[f1' f2'];
-----
t           = x(2,:) - sin(6.0*pi*x(1,:)+2.0*pi/dim) - 0.5*x(1,:) + 0.25;
% nonlinear inequality constraints
c = [sign(t).*abs(t)./(1.0+exp(4.0*abs(t)))];
% nonlinear inequality constraints
ceq=[];
clear tmp index1 index2;
=====
Comet 
-----
nob=3;
%nv=2;
xlv=[1 -2 0];
xuv=[3.5 2 1];
-----
f1=(1+x(3,:)).*((x(1,:).^3).*(x(2,:).^2))-10.*x(1,:)-4.*x(2,:);
f2=(1+x(3,:)).*((x(1,:).^3).*(x(2,:).^2))-10.*x(1,:)-4.*x(2,:);
f3=3.*(1+x(3,:)).*x(2,:);
f=[f1' f2' f3'];
=====
TF4
-----
nob=3;
nv=3;
xlv=[0 0 0];
xuv=[2 1 1];
-----
f1=1+(x(1,:)-1).^5;
f2=x(2,:);
f3=x(3,:);
f=[f1' f2' f3'];
-----
c=[0.5-x(3).^2-(1+(x(1)-1).^5).^2; 0.5-x(3).^2-x(2).^2];
ceq=[];
=====
TF5
-----
nob=2;
nv=3;
xlv=[-4 -4 -4];
xuv=[4 4 4];
-----
[m n]=size(x);
f1=zeros(n);
f2=zeros(n);
for i=1:3
    f1=(1-exp(-sum(x(i,:)-(1/sqrt(3)))).^2);
    f2=(1-exp(-sum(x(i,:)+(1/sqrt(3)))).^2);
end
f=[f1' f2'];
=====
TF6
-----
nob=3;
nv=2;
xlv=[-3 -3 -3];
xuv=[3 3 3];
-----
f1=0.5*(x(1,:).^2+x(2,:).^2)+sin(x(1,:).^2+x(2,:).^2);
f2=(1/8)*((3*x(1,:)-2*x(2,:)+4).^2)+((1/27)*(x(1,:)-x(2,:)+1).^2)+15;
f3=1./((x(1,:).^2)+(x(2,:).^2)+1);
f=[f1' f2' f3'];
=====
TF7
-----
nob=2;
nv=2;
xlv=[-5 -5];
xuv=[5 5];
-----
f1=-x(1,:).^2+x(2,:);
f2=0.5*x(1,:)+x(2,:)+1
f=[f1' f2'];
-----
c=[(1/6)*x(1,:)+x(2,:)-(13/2); (1/2)*x(1,:)+x(2,:)-(15/2); 5*x(1,:)+x(2,:)-30];
ceq=[];
=====

