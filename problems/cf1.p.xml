<problem>
<name> CF1 </name>
<description> </description>
<n_variables> 3 </n_variables>
<n_objectives> 2 </n_objectives>
<signature> BB </signature>
<lower_bound> 0*ones(1,3) </lower_bound>
<upper_bound> 1*ones(1,3) </upper_bound>
<min_point> </min_point>
<min_value> </min_value>
<constraint> a            = 1.0; </constraint>
<constraint> N            = 10.0; </constraint>
<constraint> [dim, num]   = size(x); </constraint>
<constraint> Y            = zeros(dim,num); </constraint>
<constraint> Y(2:dim,:)   = (x(2:dim,:) - repmat(x(1,:),[dim-1,1]).^(0.5+1.5*(repmat((2:dim)',[1,num])-2.0)/(dim-2.0))).^2; </constraint>
<constraint> tmp1         = sum(Y(3:2:dim,:));% odd index </constraint>
<constraint> tmp2         = sum(Y(2:2:dim,:));% even index </constraint>
<constraint> f1      = x(1,:)       + 2.0*tmp1/size(3:2:dim,2); </constraint>
<constraint> f2      = 1.0 - x(1,:) + 2.0*tmp2/size(2:2:dim,2); </constraint>
<constraint> f=[f1'; f2']; </constraint>
<constraint> % t           = f(2,:) + sqrt(f(1,:)) - a*sin(N*pi*(sqrt(f(1,:))-f(2,:)+1.0)) - 1.0; </constraint>
<constraint> % nonlinear inequality constraints </constraint>
<constraint> c=[- f1 - f2 + a*abs(sin(N*pi*(f1-f2+1.0))) + 1.0]; </constraint>
<constraint> % nonlinear inequality constraints </constraint>
<constraint> ceq=[]; </constraint>
<category> continuous </category>
<category> nonlinear </category>
<category> nonsymmetric </category>
<category> multimodal </category>
<category> constrained </category>
<category> largescale </category>
<category> moo </category>
<function> %The search space is [0; 1]n </function>
<function> % x and f are columnwise, the imput x must be inside the search space and </function>
<function> % it could be a matrix </function>
<function> a            = 1.0; </function>
<function> N            = 10.0; </function>
<function> [dim, num]   = size(x); </function>
<function> Y            = zeros(dim,num); </function>
<function> Y(2:dim,:)   = (x(2:dim,:) - repmat(x(1,:),[dim-1,1]).^(0.5+1.5*(repmat((2:dim)',[1,num])-2.0)/(dim-2.0))).^2; </function>
<function> tmp1         = sum(Y(3:2:dim,:));% odd index </function>
<function> tmp2         = sum(Y(2:2:dim,:));% even index </function>
<function> f1       = x(1,:)       + 2.0*tmp1/size(3:2:dim,2); </function>
<function> f2      = 1.0 - x(1,:) + 2.0*tmp2/size(2:2:dim,2); </function>
<function> f=[f1' f2']; </function>
<function> clear Y; </function>
</problem>
